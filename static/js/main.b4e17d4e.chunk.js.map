{"version":3,"sources":["TodoItem.js","TodoList.js","AddNewTodoForm.js","helpers.js","Todo.js","reportWebVitals.js","index.js"],"names":["TodoItem","todo","id","onRemoveTodo","onToggleTodoDone","isDone","removeTodoHandler","useCallback","toggleTodoDoneHandler","style","textDecoration","onClick","React","memo","TodoList","todoItems","Array","isArray","length","map","AddNewTodoForm","onAddTodo","formik","useFormik","validateOnChange","validateOnBlur","initialValues","validationSchema","Yup","shape","min","max","required","onSubmit","values","resetForm","errorKeys","Object","keys","errors","aFormikError","handleSubmit","name","type","onChange","handleChange","value","autoComplete","saveTodoItemsToLocalStorage","key","data","localStorage","setItem","JSON","stringify","Todo","useState","getItem","parsedJSON","parse","e","getTodoItemsFromLocalStorage","setTodoItems","addToHandler","latesetTodoItem","sort","a","b","newTodoItems","console","log","filter","todoItem","find","className","ondAddTodo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4e17d4e.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\n \nconst TodoItem = ({ todo, id, onRemoveTodo, onToggleTodoDone, isDone }) => {\n    const removeTodoHandler = useCallback(() => onRemoveTodo(id), [id, onRemoveTodo])\n    const toggleTodoDoneHandler = useCallback(() => onToggleTodoDone(id), [id, onToggleTodoDone])\n    return (\n        <li>\n            <span style={{textDecoration: isDone ? 'line-through': 'none'}}>{todo}</span>\n            <button onClick={removeTodoHandler}>Delete</button>\n            <button onClick={toggleTodoDoneHandler}>{`Mark as ${isDone ? 'pending': 'done'}`} </button>\n        </li>\n    )\n}\n\nexport default React.memo(TodoItem);","import React from 'react';\n\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ todoItems, onRemoveTodo, onToggleTodoDone }) => {\n    return (\n        <ul>\n            {\n                todoItems && Array.isArray(todoItems) && todoItems.length > 0 && todoItems.map(({ id, todo, isDone}) =>(\n                    <TodoItem\n                        key={id}\n                        id={id}\n                        todo={todo}\n                        onRemoveTodo={onRemoveTodo}\n                        onToggleTodoDone={onToggleTodoDone}\n                        isDone={isDone}\n                    />\n                ))\n            }\n        </ul>\n    )\n};\n\nexport default React.memo(TodoList);","import React from 'react';\nimport {useFormik} from 'formik';\nimport * as Yup from 'yup';\n\nconst AddNewTodoForm = ({ onAddTodo }) => {\n    const formik = useFormik({\n        validateOnChange: false, \n        validateOnBlur: false,\n        initialValues: {\n            todo: '',\n        },\n        validationSchema: Yup\n        .object()\n        .shape({\n            todo: Yup.string()\n            .min(3, 'Text is too short.')\n            .max(20, 'Text is too long.')\n            .required('Text is required.')\n        }\n        ),\n        onSubmit: (values, { resetForm }) => {\n            onAddTodo(values.todo);\n            resetForm();\n        },\n    })\n    const errorKeys = Object.keys(formik.errors);\n    const aFormikError = errorKeys.keys.length > 0 ? formik.errors[errorKeys[0]]: null;\n    return (\n        <form onSubmit={formik.handleSubmit}>\n            <label>Todo</label>\n            <input\n                id='todo'\n                name='todo'\n                type='text'\n                onChange={formik.handleChange}\n                value={formik.values.todo}\n                autoComplete=\"off\"\n            />\n            <button type=\"submit\">Submit</button>\n            {aFormikError && <span>{aFormikError}</span>}\n        </form>\n    )\n};\n\nexport default React.memo(AddNewTodoForm)","export const getTodoItemsFromLocalStorage = key => {\n    const value = localStorage.getItem(key);\n\n    let todoItems = null; \n    try {\n        const parsedJSON = JSON.parse(value);\n\n        if (Array.isArray(parsedJSON)) {\n            todoItems = parsedJSON;\n        }\n    } catch(e) {\n        todoItems = []\n    }\n    return todoItems; \n}\n\nexport const saveTodoItemsToLocalStorage = (key, data) => localStorage.setItem(key, JSON.stringify(data));","import React, { useState, useCallback } from 'react';\nimport TodoList from './TodoList';\nimport AddNewTodoForm from './AddNewTodoForm';\n\nimport {getTodoItemsFromLocalStorage, saveTodoItemsToLocalStorage} from './helpers'\n\n\nconst Todo = () => {\n  const [todoItems, setTodoItems] = useState(getTodoItemsFromLocalStorage('todo') || [])\n  const addToHandler = useCallback(todo => {\n    let latesetTodoItem = null\n    if (todoItems.length === 1) {\n      latesetTodoItem = todoItems[0]\n    }\n    else if (todoItems.length > 1) {\n      const todoItemsDesecendingSortedById = todoItems.sort((a, b) => a.id > b.id)\n      latesetTodoItem = todoItemsDesecendingSortedById[0]\n    }\n    const newTodoItems = [\n      {id: latesetTodoItem ? latesetTodoItem.id + 1: 0, \n      todo, \n    }, \n    ...todoItems,\n  ]\n  setTodoItems(newTodoItems)\n  saveTodoItemsToLocalStorage('todo', newTodoItems)\n    console.log(newTodoItems)\n}, [todoItems])\n\nconst removeTodoHandler = useCallback(id => {\n  const newTodoItems = todoItems.filter(todoItem => todoItem.id !== id)\n  setTodoItems(newTodoItems)\n  saveTodoItemsToLocalStorage('todo', newTodoItems)\n}, [todoItems])\n\nconst toggleTodoDoneHandler = useCallback(id => {\n  const todo = todoItems.find(todoItem => todoItem.id ===id)\n  todo.isDone = !todo.isDone\n  setTodoItems([...todoItems])\n  saveTodoItemsToLocalStorage('todo', todoItems)\n}, [todoItems])\n\nreturn (\n  <div className=\"todo\">\n      <h1>Todo</h1>\n      <AddNewTodoForm\n        ondAddTodo = {addToHandler}\n      />\n      <TodoList \n        todoItems={todoItems} \n        onRemoveTodo={removeTodoHandler} \n        onToggleTodoDone={toggleTodoDoneHandler}/>\n  </div>\n  ) ;\n}\n\n\n\nexport default React.memo(Todo);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todo from './Todo';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Todo />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}